Formula based crafting system for Factorio/Shapez like games.

YagaoDirac

github.com/yagaodirac/internal-reference......

This is first posted in Automation Station's Discord channel. The text is too long to be post there. So I move it to my github. Hope you enjoy it.

Let me add some more detail I think I really have to post here in order to help devs and players in this channel to understand why this bueatiful idea is barely used in real projs.

The pros and cons of formula based crafting systems:
Pros:
Every new rule added to the crafting system is multiplied to all the existing ones. So, it's pretty code amount effecient. I mean, very little code but really almost infinite recipes. This also make sure players have really a lot to dig in this game, which maybe provide this game with a super long lifespan, before players feel boring and everything in the game is just repeating.
The same thing can be done to different ingredient. So it's possible to make the very original ingredient(i.e. ores) procedurally generates, w/ fancy logic or simply a mixture. Let's say a source gives out a1 and a bit b1, you make 1 into 2, then you game a2 and a bit b2, if a2 is good but b2 is useless. The game should provide a rule to handle the useless items. This also introduces more unlock types.
"""From Scott in Automation Station Discord server, and probably employee of the corresponding project.
Instead of players having to look up recipes, they can intuit their way to the correct solution by combining the different game mechanics. """
I assume that only one rule set be added to this game, and then the second for edition 2. If we have 5 ideas, they are enough for 5 editions.

Cons:
Every rule has to be ok for all the cases. If we can cut trees to get logs, then we are allowed to cut mines to get long cylinder copper bars, and this should also be true for stone. The shape counts because then we make wooden plates from cylinder shaped logs. If we can smelt mines to get metal, then we should also be allowed to smelt wood. For most games which use real name of items in real world, this is not practical.
It's not practical to make a+b->c. But it's very safe to make a->b, then b->c.
We can probably have only 1 rule set(or only 1 type of puzzle) for the entire game since it doesn't really help the game to become better if we really code the second one. So we have to choose smartly.
Every new rule should be tested enough before it's really added to the game, because this is really dangerous.
If mod system is added, it's easy for non official devs to break the entire game by adding some weird rules.

Now the concern is mainly about how to select the best rules. Here are some I think at least have a chance to work out:
1, Tetris like. Every factory is a move in tetris. The destination can be a max height, or a specific shape(partly).
2, Sokoban like. Every factory is a move in a sokoban like game. You can introduce almost anything you can invent base on the basic rules. For instance, allowing moving multiple lines at once(but 1 line once is actually more advanced), cracking some blocks other than plain boxes, pushing multiple boxes in a line(the more the more powerful).
I think all the puzzling game rules can be used for this purpose. You can fine a lot on itch.io, armorgames.com, crazygames.com and surely steam.

Some suggestions:
Allow no-op factories. Don't make the moves smart. Let players do anything. The similar to python vs c++. Let's say the Sokoban like rule set, if I have a o_o_o and a _oo_o, and I move the first one to the right side, both should be moved into _oo_o. If the algo finds the first o and move at most 2, then, o_o_o into _oo_o, and _oo_o into __ooo. In the first way the 2 ingredient converge into only 1 kind but the second way doesn't help. If the ore is 80% o_o_o and 20% _oo_o, this should make some realy difference.
Don't make a main base in the mid. Use sources and multiple targets instead. Different items should go to different targets. They can be shops, or literally anything. Targets absorb what they want and give coins, or absorb what they don't want and give nothing. This design is equivalent to slitting the only main base into multiple bases.
If you decide to make unstable or mixed or procedurally generated ores( or anything similar to this as the most original ingredient and not repeating all the time ), add a conveyor monitor to stats the recent 100 items pass through. It does nothing but let the player know the stats result. Players can use the same steps to make similar ingredients into same results if they can, and this tricky thing should be encouraged.
The splitter( belongs to the conveyer system in Factorio. Each only gives out what it gets evenly into 2 conveyers.) is a great design. It can be used to make any rational number splitter if they are combined properly. Btw, I invented it.




