英语文本单字随机映射加密 暴力破解的一个简化方法

作者：YagaoDirac

写在开头：
我记得最早去百度密码吧好像是2013年吧。反正很有趣，确实学到很多东西。
前段时间又重回密码吧，本来是想找一下，有没有什么古典密码，或者新式的比较偏娱乐的密码，可以用到游戏里面的。结果，可惜，并不太有。加密强度往往都太过巨大，并不适合游戏用途。
不过呢，时间没有白花，其中的成果之一就是这一篇文章。
当然，由于本人经验其实很有限，所以只能提供一个大致可行的方法，并不保证这个方法就足够好。类似的方法应该已经被重复发明无数次了。那为什么我还要再来发明一次？因为期刊需要文章啊。。
我会在最后说一个可能可行的把这个技巧应用到游戏设计里面的方法。


正文：
【1，名词解释】
英语文本单字随机映射加密，到底是什么。
答案必须是英语文本。英语文本和拼音文本，或者罗马音，其实是不一样的，解的过程需要用到很多英语特有的结构。
单字映射的意思是说，一个字母在密码当中，有一个固定的对应关系，这个对应关系在整个加密过程里面是完全不变的。
随机映射的意思是说，和凯撒一类的有规律的相比，随机映射的不同字母的映射关系里面是没有任何的关联的，无法从一些映射关系直接推测出其他的映射关系。当然，这也就兼容了有规律的映射。所以如果有一个方法可以直接处理随机映射，那么这个方法也就能处理全部的有规律映射，包括凯撒，包括atbash，以及用各种方法生成的密码表来实现的加密，而且可以绕过对密码表生成逻辑本身的推测。
还需要举例子吗？老实说我都不知道到底要怎么举出一个ok的例子。读者可以自己动手做一个密码。
其实这个加密方法的加密强度对不了解解密方法的人来说，几乎是无懈可击的。但是嘛，继续往下读吧。

【2，解法】
好像这篇文章就2个部分就完事了。那我在最后加个举例吧。

最核心的原理是利用短单词。英语里面短单词的出现是非常频繁的，这些单词并不多，里面的字母的分布是非常不均匀的。
https://www3.nd.edu/~busiforc/handouts/cryptography/cryptography%20hints.html
这个是网上随便找的一个网页，其实就已经非常好非常够用了。类似的网页应该还不少。
直接看最下面。
1个字母的单词，只有2个，I和a。也就是说如果看到这种情况，基本上可以直接断定。但是呢，老实说，有时候，文本不是很规范，所以不能完全相信，尤其是1个字母的单词的情况。不过这个还是一个很强的参考。
由于缩写，会形成't和's的结构。但是有时候我不会用这个参考，因为有可能出现一些很不规范的情况。类似的，还有'll,和，几个别的。网页里面有。
2个字母的单词，当中需要重点强调的，of, to, in, it, is, as, at。这几个。为什么要专门拿这几个单词出来说呢，核心原因，除了他们的频率非常高，还有一个就是他们有很多重复的字母。仔细看，it to of，这个结构，是非常强的一个参考，这个结构本身的变形并不多，主要有，at to of/ is so of/ as so of/ in no of。也就是说，3个2字母单词，构成类似接龙的结构，基本上可以断定后面一定是of，第一个字母是i和a里面，第二个字母是t s n里面。当然我的总结并不全，事实上就昨天，我就因为知道这个结构的种类不够多，而坑过一次。另外，如果文本并不是很长，as，so，no的出现频率可能不足以让他们真的出现，所以可以从频率高的开始尝试。
2字母单词的 ab bc型的结构就比较多了，基本上不太能作为参考。
2字母单词的我已知的唯一的回文结构，no on。
3字母单词，最常见的主要是the are you。这个地方要结合2字母单词的参考，因为上面提到了，可以比较容易的判断出o和f。在3字母单词出现最多的里面，you的中间是o，利用这个规律，基本可以稳定的判断出来。而如果参考更长的单词，应该很容易判断出th。are的开头是a，可以帮助判断2字母里面的i和a的关系。
三字母单词里面的abb形式，好像只有see和too。s，t和o应该是比较好判断的，应该也就能判断出来了。
到现在，已经有差不多10个字母找到了映射关系了，剩下应该不是什么特别困难的事情了。
另外，就是ab和abc同时出现，或者是abc和abcd这种同时出现，其实是有一些规律的。具体的我真的不是很清楚，反正把上面的部分做完以后，这个规律应该会很明显。比如,to too/the they/the them/the then/no not/of off/see seen，以及很多暂时想不到的。但是真正需要特别关注的是出现频率比较高的。

【3，注意事项】
本来想举例的，实在不想麻烦了。
说点注意事项。
在解的时候，一定不要直接替换到原来的文本里面。原因是会造成混淆。
比如，abcd，凯撒，变成bcde，这个时候在解的时候，如果先把b还原成a，然后c还原成b，中间的结果是acde，abde，abce，abcd，并不会出问题。但是如果顺序反过来，先把e还原成d，然后d还原成c，就会出现，bcdd，然后d要还原成c，就会出问题了。
我建议的方法，当然能用代码是最好的，方便。不过多数人还是只能用txt来解决，那么，原文用小写，解出来的部分用大写，可能就是一个比较好的方法。我通常用的排版方法是，比如，
bcde，解出e的原文是d，那么：
bcde
   D
之后如果解出c的原文是b，那么：
bcde
 B D
这样就非常清晰。
我通常还会在文本的最后列出所有的重要信息。
接下来，我用不加密的方式做一个示范。或者可以理解为凯撒0的加密。单纯示范一下格式。
文本示范开始：
don't read the lowercase characters, these words should have been encrypted, but i am too lasy. 
    T  E   THE    E    E  H    TE    THE E                    EE  E     TE     T      T
i think i have to write some more, only to show how my typesetting method deals with multi lines 
I THI   I                               T              T  E ETT      TH    E      TH    T        
text.
TE T      

abcdefghijklmnopqrstuvwxyz   （由于我没有真的加密，所以这个地方上下两排是一样的)
    E  HI          T

然后是词频统计，最好能把1到4字母的都统计一下
i3次,
am to2次,my
the but too how
（4个字母的就不统计了）

文本示范结束。
非常清晰。反正总之就是不要把解出来的半成品和还没解的部分，混在一起，那样是很影响阅读的。


【4，如何把这个技巧用到游戏设计当中】
最核心的问题就是，不要让用户真的去破解密码。可以把破解步骤一点一点的呈现出来。类似拼图，一块一块的给出来，那种感觉。当然，推进到一个地步的时候，用户大概也就能直接把答案读出来了。后面就直接一次全部给出来就好了。
那么第二个问题来了，翻译。可能确实，没办法。



写在最后：
老实说，这篇文章非常的赶。
当时有一篇总结所有我已知的比较合理的加密方法以及他们的破解方法的文章，可惜写了一半，觉得终究还是学识太过浅薄，就停了。不知道以后还会不会继续写完。
希望给大家的表白一类的事情，增加一点乐趣。


2020-07-07

































