放置游戏的基本循环的逐渐多层化趋势 正在逐渐显现

作者：YagaoDirac

有做这一块研究的朋友应该对prestige这个概念不陌生。最早为了提高资源利用率，让同一段游戏内容反复被使用，而发明出来的一个机制。或者说，类似于，通关整个游戏以后，再一次玩的时候，给予用户某种加强。在放置游戏中，通常是一个叫做prestige的升级，这个升级会将几乎所有（通常就是所有）的更低等级的已经解锁的升级选项一笔勾销，从而让用户把玩过的部分再玩一次。通过增加一个足够强力的加强，让两次的游玩体验有足够大的区别，从而让用户能真的玩得下去。
这种循环，曾经叫做放置游戏的prestige模式，但是以后可能要叫做第一阶prestige了。
其实原因很简单。比如说，现在有20个升级，全部解锁，或者说解锁足够多个以后，prestige的功能就可以使用了。在prestige以后，前面的20个升级会被重置为没有解锁，而prestige可能也提供了非常多次的内容，也就是说，这个前面的小升级，然后prestige的这个行为，可以不是一个组合，而是一种循环。
我感觉以后可以写成
（20个基础升级）prestige
然后后来，就有了，在prestige的内容解锁足够多的时候，又有一个新的东西，他会把连prestige，带基础升级的内容全部重置，然后提供一个更大的加强，如果用上面的公式来写，就是
（（20个基础升级）prestige）Transcendation
这个地方就要提到我今天写这个文章的原因了。我今天在Kong上玩到一个游戏。这个游戏好像一直在更新，有半个多月了吧。现在品质渐渐的就好了起来，有兴趣的朋友可以看看。
https://www.kongregate.com/games/Platonic/synergism#recent_comments
Synergism
来自：Platonic
对，没错，单词就是从这个游戏里面抄出来的。

其实在之前，我很喜欢的Defender Idle New Beginning的作者Barbasu的新作里面，就已经有了Prestige Tire 1到3的这种设计，虽然这3阶的prestige是不取消更低阶的prestige的。
差不多可以解释为prestige里面还有一个分阶段解锁的结构。

实际上，还可以再在外面套东西。比如说
（（（（基础升级）prestige 1）prestige 2）prestige 3）prestige 4）prestige 5
当然这个是可以无线的套下去的。

我今天写文章的核心目的就是想说，如果大家是做这一块研究，或者说在做类似的项目，应该要看到这个趋势。

当然，如果说这种嵌套的方式真的会提高游戏的乐趣，那么以后一定会出现 层式放置游戏（Layer-like Idle game），或者把名字换成，面板式放置游戏（Panel Oriented Idle game)。大概是什么意思呢，我简单说明一下吧。
比如，有一个panel，比如叫做panel 1，上面有10个升级选项。你可以把他当成是一个小的放置游戏。比如说他里面有3种资源，10种升级，最终把第三种资源积累到1000，就算结束。当这个条件达成的时候，用户可以进入一个ui，从里面给的3种新的panel里面选择一个，作为第二个panel，比如叫做panel 2，这个新的panel 2里面只有一个按钮，上面的提示是说，将panel 1重置，从而获得panel 2里面的第一种资源1点。然后用这个panel 2的资源，可以解锁panel 2的内容，并完成panel 2的目标。
这样就实现了一个类似于，把2个小的放置游戏连接起来的效果，从游戏的逻辑结构上来说，不再是（（内容）prestige）而是（panel1 -> panel2）
实际上，可以做的变换远远不止这点。比如可以做一个标准接口，一个panel接受别的panel的强化，也可以发送出一些强化来强化别的panel，比如在上面的例子里面，p2可以有一个什么升级是提升p1的某些数值的，比如增加p1里面的某种资源的获取速率，增加某种转换关系里的关键数值。如此一来，p2在能够形成自己的内循环之前，就类似一个专门给p1设计的prestige系统，而当p2能够形成内循环了，它也完全可以作为一个独立的panel。如此一来，如果同时允许多个panel存在，就可以得到
p1->p2->p3->p4->p5
这个和前面的嵌套关系最大的区别是，嵌套管理的prestige5可能还多少需要考虑一下要怎讲加强prestige3，甚至是基础升级，而且层数无论多少，基础升级是无法被抛弃掉的，最终只能是有限层的prestige，而且还要做辅助功能，从而在游戏足够靠后的时候，让基础升级以及非常低阶的prestige能自动升级，而不用用户每次都去手动点一遍。这个其实就是我今天给的链接的游戏里面的做法。这本身带来了额外的开发负担，而且也限制了游戏的往后的无限可能。并且由于“基础升级”这一块是一个绝对意义上的起点，而放置游戏的起点附近的资源的利用率是无法特别高的。事实上，如果资源在流程上的分布是线性的，那么最两端的资源的利用率都是非常差的。
而如果是按照我提出的，链式结构，任何的panel只和前后的有限个panel有关联，那么就可以在一定的条件下，抛弃最先前得到的panel。比如用户已经解锁了p5了，而这个时候p1对游戏进程的贡献已经几乎看不到了，那么可以设计一个机制让用户把p1折成某种资源。这样就不用做什么，自动升级某些选项。而且panel可以都有标准的接口，比如，对panel n来说，接受n+1（甚至n+2和3）发送出的强化，发出强化给n-1（甚至n-2和3），发动prestige获得很有限的初始资源并重置n-1，当n+1发动prestige的时候自己要重置。并且，在所有会牵扯到别的panel的选项上，tooltip里面限制的内容也是从相应的panel里面get出来的，从而会很直观的看到，直观就意味着对复杂性的支撑。或者还有别的一些什么特殊情况。然后每个panel有自己单独使用的1种或者几种资源，互相不共享（或者你们有办法让他们合理的共享起来也是很不错的）。甚至每个字循环panel还可以有专属的给自己提供buff的附加panel，于是得到：
p1 with(buff1,2)->p2 with(buff3,4,5)-> p3 ->p4 with(buff6)
这样做的好处，1，不用写自动点击逻辑，2，panel出现的顺序可以让用户自己决定，3，可以对panel的实际存留的时间做统计，从而平衡他们的难度（因为考虑到排行榜上可能只能统计用户总共完成了多少个panel），4，可以对panel被选择的频率做统计，从而知道那些panel被用户喜爱。5，兼容mod，如果不想做排行榜的话。6，资源的利用率不会受资源在游戏流程种出现的时机的影响。7，panel出现的顺序可以是随机的，或者允许用户一定程度上决定，从而让游戏的变化性最大化。毕竟对于没有很严肃的剧情的游戏，游戏内容夸张一点是有好处的。

行了，今天就先写这么多吧，又莫名其妙写了半个小时。

反正这个大的趋势，我今天就这样直接预言了。一定会出现。

希望你们喜欢。

2020-05-15









