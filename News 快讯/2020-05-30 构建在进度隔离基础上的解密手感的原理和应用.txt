构建在进度隔离基础上的解密手感的原理和应用

作者：YagaoDirac

写在开头：
我一直在说要写一个关于卡关的文章，但是一直没有真的写，原因是我感觉内容好像不够丰富。
这篇文章里面会用到，那我就只有简单的先说一下。
卡关的意思是，无法推进游戏进度。这个现象的形成，除了难度设计过高，还有一些和难度无关的，我知道的有2个，一个是逻辑卡关，一个是手感卡关（注：所有名词都是我自己造的）。逻辑卡关的意思是，包括代码错误，包括死锁，包括哲学家吃饭问题，所导致的，正常手段在理论上不可能推进进度，说白了就是bug导致的卡关。还有一个叫手感卡关，就是当游戏的推进速度慢到用户觉得不想继续玩当前正在玩的游戏了，就不玩了。我把这个情况也归到卡关里面，因为实际效果是类似的。甚至在大多数情况下，不分析代码的话，可能是无法分辨这2种卡关的情况的。
进度隔离是我造的众多术语之中的，还比较常用到的一个，大致的含义是，将游戏内容按照进度来进行绑定，对于一些用户可以通过一些方式囤积的资源，尽量不要跨进度通用。换句话说就是，游戏前半截可以刷的物品，在后半截就不要有用，不然会导致游戏难度的调校和控制的困难。
需要铺垫的好像就这么多了。
那就开始吧。
老规矩，尽量短。


正文：
对于有做比较严格的进度隔离的游戏，有一个思路是，基于这种进度隔离，可以形成解密的手感。
这种情况下，进度隔离可以是资源种类和进度绑定，可以是性价比降低（比如价格是指数，效果是线性），或者任何可行的（包括游戏内地理空间的隔离）。今天文章里面说的情况，通常需要比较严格的，力道很强的进度隔离，在这些隔离上，留下缺口来让用户从一个阶段进入到下一个阶段。
特征1，肯定要用进度隔离嘛，不隔离，哪儿来的缺口。

如果说这些缺口需要用户经过对游戏的研究，来发现，这就形成了今天的文章里面想要说的，基于进度隔离，形成的解密手感。注意，只是手感，并没有直观的解密元素。
其实这个想法比较明确的进入我的思维，是在我最近玩了一个游戏之后。这个游戏是Synergism，来自Platonic，（https://www.kongregate.com/games/Platonic/synergism）。就我现在玩到的部分，游戏里面提供了大概170个逻辑上不重复的升级选项，实际手感来说，至少相当于50个非常清晰有效的，不同的，升级选项。和之前的Defender Idle New Beginning(来自Barbasu)相比，应该说是有过之无不及。根据我并不是特别清晰的记忆，DINB的不同逻辑的升级选项大概在200左右，但是实际手感只相当于50个左右，而且清晰程度是不如这次的Synergism。
这是我想说的，构建方式当中，第2个很重要的特征，就是需要大量的逻辑层面不重复的升级选项来打底。

然后我要说一个，我觉得可能有效的定量的技巧，来帮助确定升级选项的价格。
比如说，在某一个阶段，用户已经解锁了a（a可以表示一个集合，不一定是一个单一的升级）。这个时候，用户有资源解锁b，但是没有足够的资源解锁c。那么，当只有a的时候，解锁c需要等待时间T，而如果利用a的收益，先解锁b（需要t1），利用a和b共同的收益，解锁c，需要t2。如果可以让T=k×（t1+t2），其中k>100，甚至更大，那么就可以做出一个升级顺序。之后再利用abc的共同的收益，继续往下推。在ui排列的时候，千万不要把abc按顺序放在一起，一定要让他们分布在不同的地方。
这个时候就又要回到一个根本性的问题，ui的排列，到底是按什么依据。之前我有一个观点，我觉得升级选项的分类应该是按照收益类型，比如增加同一种资源的升级放在一起，有某种排序，或者也可以不排序。但是现在通常的做法是将消耗相同资源的升级放在一起。这个细节和上面讲的定量技巧好像并不冲突，但是必须基于有足够多种的不同的资源，如此一来，可以举个例子
1号升级，消耗资源a，增加资源b的收益。
2号升级，消耗资源b，增加资源c的收益。
3 c->d, 4 d->b, 5 b->a, 6 a->e, 7 e->c
总之就是越乱越好。如此一来，无论是按照消耗资源的种类（或者可以认为是解锁这个升级的条件），还是按照收益资源的种类，这些升级选项都会分布到不同的地方。从而形成解密手感。
特征3，大概就可以归纳为，需要有多种资源，升级选项应该可以使用各种不同的资源，来增加其他类型的资源的收益，而且在进度上相邻的，甚至相近的升级选项，所使用和产出的资源，尽量的不同，尽量的分开分布。

上面说的情况，是单一升级路线的放置游戏的情况。实际上，我暂时还没有论证，但是直觉告诉我，多路线的放置游戏也是可以这么做的，只是资源利用率可能是一个问题。我在之前的一篇文章 《2020-05-15 放置游戏的基本循环的逐渐多层化趋势 正在逐渐显现.txt》 中，提到过，实际上放置游戏的进度可以不是一个线性的，在变化的时候，不光可以是多路线，甚至可以是循环式的。但是逻辑不是积木，要融合的话，可能真的还需要一些作品来验证吧。

实际上我还大致论证过一个情况，就是现在的那些其实并不是很偏重剧情的arpg的情况，包括有一些画面其实很粗糙的类似的游戏，这种大类里面有非常多的是轻量化的2d游戏，这些游戏通常会用npc给的任务，或者是boss战一类的，来做一个进度隔离。那么有进度隔离，就可以留下空子，留了空子，如果让用户通常对游戏的研究来发现这些空子从而推进进度，那么就是这篇文章里面说，解密手感。我现在还没见过这个情况，也暂时不准备做很全面的论证，毕竟玩法的论证和代码一样，论证一万次，不如实际跑一次。等见过作品了再说。不过可以提前想到一个很严重的问题，也就是在开头的部分的说明里面提到的，卡关。实际上就我玩过的仅有的不多的这一类的游戏，进度隔离都是通过boss战来形成的，如果要说有别的形式，那就是需要完成某个特定的战斗的任务，其实还是一个意思。换句话说，这一块的用户的思维习惯大概会觉得，凡是战斗不能解决的问题，可能就是会导致卡关的bug，所以要如何让用户真的去研究游戏本身，找出这些专门设计的缺口，恐怕反而是这个做法的最大的问题。总之还是等小游戏先去试水吧。

如果再把讨论的范围放宽泛一点，我还记得之前的Robot Wanna系列，还有我在游戏推荐里面提到过的一个小蜜蜂只能走12步的一个游戏。他们是通过地形的通过性来做的进度隔离，于是突破隔离的方法就是去找到地图上的某种能增加角色通过特定地形的能力的强化（或者叫解锁）。当然，Robot wanna系列里面还是保留了boss战的光荣传统。这一类游戏也是非常赞的。之前其实有很多范式化的，基于跳台大背景的，比如什么，需要跳上远处的一个平台，但是没有二段跳，需要向上通过一段很窄的通道，但是没有踩墙跳，需要向上通过一个很宽的通道，但是踩墙跳以后，在空中不能换方向，有二段跳但是没有dash所以还是无法到达某些超级远的位置，无法踩天花板走路，所以无法跳过某些地面有刺的很矮的通道，一类的。蜜蜂那个游戏就更妖娆了。这一块的作品其实很多，通常会被归到platform大类下。但是这一类有几个和放置大类完全不同的特征，1是通常需要操作，操作技巧不好的话，尤其是玩游戏不多的人，经常无法正常的玩，2是通常会有boss战，对我这种对战斗内容不太有兴趣的老年人，这就变成了一个并不是很吸引人的事情，3是通常解锁内容相对固定，而不是特别多，解锁的效果永远就那些。当然也可以认为是，本身是一个成熟的品类，成熟到有一些降低阅读量的有效方法。而且这种解锁对开发和测试来说，难度比较大。包括在做量化的时候的难度也会很大。但是老实说，可能是有潜力的。

差不多今天就只想到这么多。等我想到了再来补充吧。


2020-05-30


